{"version":3,"sources":["components/nav/nav-dropdown.js","components/nav/nav.js","components/posts/posts.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","react_default","a","createElement","key","this","props","mainTitle","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","subTitles","map","title","react_router_dom","to","undefined","d_titles","Component","Nav","style","backgroundColor","type","data-target","aria-controls","aria-label","nav_dropdown","Posts","App","nav_nav","react_router","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAyCeA,0LAnCX,OACEC,EAAAC,EAAAC,cAAA,MAAIC,IAAKC,KAAKC,MAAMC,UAAU,OAAQC,UAAU,qBAC9CP,EAAAC,EAAAC,cAAA,UACEK,UAAU,oDACVC,GAAI,iBAAmBJ,KAAKC,MAAMG,GAClCC,cAAY,WACZC,gBAAc,OACdC,gBAAc,SAEbP,KAAKC,MAAMC,WAEdN,EAAAC,EAAAC,cAAA,OACEK,UAAU,gBACVK,kBAAiB,iBAAmBR,KAAKC,MAAMG,IAE9CJ,KAAKC,MAAMQ,UAAUC,IAAI,SAAAC,GAAK,OAC7Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMb,IAAKY,EAAM,UAAWE,GAAI,IAAMF,EAAOR,UAAU,iBACpDQ,UAGoBG,IAAxBd,KAAKC,MAAMc,UACVnB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,0BAEQW,IAAxBd,KAAKC,MAAMc,UACVf,KAAKC,MAAMc,SAASL,IAAI,SAAAC,GAAK,OAC3Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMb,IAAKY,EAAM,WAAYE,GAAI,IAAMF,EAAOR,UAAU,iBACrDQ,cA5BMK,cCsDRC,mLApDX,OACErB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,uCAAuCe,MAAO,CAACC,gBAAmB,YAC/EvB,EAAAC,EAAAC,cAAA,QAAMK,UAAU,2BAAhB,eACAP,EAAAC,EAAAC,cAAA,UACEK,UAAU,0DACViB,KAAK,SACLf,cAAY,WACZgB,cAAY,0BACZC,gBAAc,yBACdf,gBAAc,QACdgB,aAAW,qBAEX3B,EAAAC,EAAAC,cAAA,QAAMK,UAAU,yBAGlBP,EAAAC,EAAAC,cAAA,OACEC,IAAI,SACJI,UAAU,2BACVC,GAAG,0BAEHR,EAAAC,EAAAC,cAAA,MAAIK,UAAU,4CACZP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aACZP,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMT,UAAU,yBAAyBU,GAAG,KAA5C,SAIFjB,EAAAC,EAAAC,cAAC0B,EAAD,CACEpB,GAAI,EACJF,UAAW,SACXO,UAAW,CAAC,SAAU,YAExBb,EAAAC,EAAAC,cAAC0B,EAAD,CACEpB,GAAI,EACJF,UAAW,aACXO,UAAW,CAAC,aAAc,WAE5Bb,EAAAC,EAAAC,cAAC0B,EAAD,CACEpB,GAAI,EACJF,UAAW,MACXO,UAAW,CAAC,YAAa,oBAzCrBO,aCSHS,mLARX,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCALYkB,aCoBLU,mLAbX,OACE9B,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACIhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYN,cAP9BO,IAAMhB,WCKJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP3C,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAC0C,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.306825c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './nav.css'\r\n\r\nclass Dropdown extends Component {\r\n  render() {\r\n    return (\r\n      <li key={this.props.mainTitle+\"_key\"} className=\"nav-item dropdown\">\r\n        <button\r\n          className=\"nav-link dropdown-toggle dropdown-item ButtonLink\"\r\n          id={\"navbarDropdown\" + this.props.id}\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          {this.props.mainTitle}\r\n        </button>\r\n        <div\r\n          className=\"dropdown-menu\"\r\n          aria-labelledby={\"navbarDropdown\" + this.props.id}\r\n        >\r\n          {this.props.subTitles.map(title => (\r\n            <Link key={title+\"_d_item\"} to={\"/\" + title} className=\"dropdown-item\">\r\n              {title}\r\n            </Link>\r\n          ))}\r\n          {this.props.d_titles !== undefined && (\r\n            <div className=\"dropdown-divider\" />\r\n          )}\r\n          {this.props.d_titles !== undefined &&\r\n            this.props.d_titles.map(title => (\r\n              <Link key={title+\"_dd_item\"} to={\"/\" + title} className=\"dropdown-item\">\r\n                {title}\r\n              </Link>\r\n            ))}\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"./nav-dropdown\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg py-3 rounded\" style={{\"backgroundColor\": \"#FF6E00\"}}>\r\n        <span className=\"navbar-brand text-white\">HorangApple</span>\r\n        <button\r\n          className=\"navbar-toggler bg-white navbar-light ButtonLink rounded\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n\r\n        <div\r\n          key=\"navbar\"\r\n          className=\"collapse navbar-collapse\"\r\n          id=\"navbarSupportedContent\"\r\n        >\r\n          <ul className=\"navbar-nav ml-auto bg-white rounded px-3\">\r\n            <li className=\"nav-item \">\r\n              <Link className=\"nav-link dropdown-item\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <Dropdown\r\n              id={1}\r\n              mainTitle={\"Python\"}\r\n              subTitles={[\"Python\", \"Django\"]}\r\n            />\r\n            <Dropdown\r\n              id={2}\r\n              mainTitle={\"JavaScript\"}\r\n              subTitles={[\"Javascript\", \"React\"]}\r\n            />\r\n            <Dropdown\r\n              id={3}\r\n              mainTitle={\"Etc\"}\r\n              subTitles={[\"Algorithm\", \"Tool\"]}\r\n            />\r\n          </ul>\r\n          {/* <form className=\"form-inline my-2 my-lg-0\">\r\n            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n          </form> */}\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\n\r\nclass Posts extends Component {\r\n  \r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Coming Soon...</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Posts","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport Nav from './components/nav/nav'\nimport Posts from './components/posts/posts'\n\nclass App extends React.Component {\n  render(){\n    return (\n      <Router>\n        <div className=\"container\">\n          <Nav />\n          <Switch>\n              <Route exact path='/' component={ Posts } />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}